-- PURPOSE:
-- This query retrieves the first 3 rows from the 'employees' table 
-- to get an initial view of the structure and data.

-- USE CASE:
-- When starting work on a new table, it's common to preview a few records 
-- to understand the available columns, data types, and content before 
-- writing more complex queries.

SELECT * FROM employees
LIMIT 3;

-- PURPOSE:
-- This query calculates a 5% salary increase for each employee 
-- and displays their name alongside the new (adjusted) salary.

-- USE CASE:
-- After a company-wide annual review, HR wants to model what a 5% raise 
-- would look like for all employees before applying the actual update to the database.

SELECT name, salary * 1.05 AS new_salary
FROM employees;

-- PURPOSE:
-- This query permanently updates each employee's salary in the 'employees' table 
-- by increasing it by 5%.

-- USE CASE:
-- This query applies the updated salaries directly 
-- to the database so that future reports and payroll calculations 
--reflect the new values.

UPDATE employees
SET salary = salary * 1.05;

-- PURPOSE:
-- This query retrieves all records from the 'employees' table 
-- to verify that the salary updates were applied correctly.

-- USE CASE:
-- After performing a mass update, it's important to 
-- validate that all records were updated as intended before generating reports 
-- or moving forward with payroll processing.

SELECT * FROM employees;

-- PURPOSE:
-- This query inserts a new employee record into the 'employees' table.

-- USE CASE:
-- A new hire named Gina has joined the company in the Admin department 
-- with a starting salary of $62,000. This query adds her information to the database 
-- so she appears in the system.

INSERT INTO employees (id, name, department, salary)
VALUES (6, 'Gina', 'Admin', 62000);


-- PURPOSE:
-- This final query retrieves all records from the 'employees' table 
-- to confirm that the new employee (Gina) was successfully added 
-- and that all previous updates, including salary changes, remain intact.

-- USE CASE:
-- A final data check is performed after inserts and updates to ensure 
-- that all changes are correctly reflected in the database before closing the task.

SELECT * FROM employees;
